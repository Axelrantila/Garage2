@model IEnumerable<Garage2.Models.Vehicle>

@{
    ViewBag.Title = "Statistics";
}

 <!--Vehicle Count-->
<h3>Vehicle Count</h3>
<b>Cars: </b> @Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.Car).Count()<br />
<b>SUVs: </b> @Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.SUV).Count()<br />
<b>Motorcycles: </b> @Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.Motorcycle).Count()<br />
<b>CarTrailers: </b> @Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.CarTrailer).Count()<br />
<b>Trucks: </b> @Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.Truck).Count()<br />
@if (Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.None).Count() > 0)
{
    @:There should not be any vehicles with the type <b>None</b> but apparently there are<br />
}

<h3>Total time parked</h3>
<p>
    @Model.Where(v => v.Parked == true).Sum(v => v.HoursParked()) Hours
</p>
<p>
    The total parking price is @Model.Where(v => v.Parked == true).Sum(v => v.HoursParked() * 60) SEK
</p>

<h3>Wheels</h3>
<b>Number of wheels in the garage:</b> @Math.Max(0,
    Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.Car).Where( v => v.Parked == true).Count() * 4 +
    Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.SUV).Where(v => v.Parked == true).Count() * 4 +
    Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.Motorcycle).Where(v => v.Parked == true).Count() * 2 +
    Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.CarTrailer).Where(v => v.Parked == true).Count() * (4 + 2) +
    Model.Where(v => v.TypeOfVehicle == Garage2.Models.VehicleType.Truck).Where(v => v.Parked == true).Count() * 6)

<h3>Owner with most debt</h3>
@{ 
    Dictionary<string, int> OwnerTable = new Dictionary<string, int>();

    foreach (var item in Model)
    {
        if (item.Parked)
        {
            if (!OwnerTable.ContainsKey(item.Owner))
            {
                OwnerTable.Add(item.Owner, 0);
            }
            OwnerTable[item.Owner] += (item.HoursParked() * 60);
        }
    }

    var ownerWithMostDebt = OwnerTable.OrderByDescending(r => r.Value).First();

    @: <span>@ownerWithMostDebt.Key has to pay the most pay at @ownerWithMostDebt.Value SEK</span>
}